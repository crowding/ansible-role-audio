#!/usr/bin/pulseaudio -nF

# This file is managed by Ansible.

# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.

.fail

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
# load-module module-switch-on-port-available

### Use hot-plugged devices like Bluetooth or USB automatically (LP: #1702794)
.ifexists module-switch-on-connect.so
# load-module module-switch-on-connect
.endif

### Load audio drivers statically
{% for card in audio.cards %}
{% if audio.backend == "alsa" %}
load-module module-alsa-sink device={{card.name}} tsched=0
{% endif %}
{% if audio.backend == "pulse" %}
load-module module-alsa-card device_id={{card.name}} card_name=alsa_card.{{card.name}} {% if audio.sample_rate is defined %} rate={{ audio.sample_rate }} {% endif %} sink_name={{card.name}} tsched=0
set-card-profile alsa_card.{{card.name}} {{card.profile}}
{% endif %}
{% endfor %}

{% if audio.backend == "pulse" %}
### Automatically load driver modules depending on the hardware available
.ifexists module-udev-detect.so
# load-module module-udev-detect
.else
### Use the static hardware detection module (for systems that lack udev support)
# load-module module-detect
.endif
{% endif %}

# Split cards into multiple virtual stereo sinks
{% for card in audio.cards %}
{% for output in card.outputs %}
{% if audio.backend == "alsa" %}
load-module module-remap-sink sink_name={{output}} sink_properties="device.description='{{output}}'" remix=no master=alsa_output.{{card.name}} channels=2 {% if audio.sample_rate is defined %} rate={{ audio.sample_rate }} {% endif %} channel_map=front-left,front-right master_channel_map={{
['front-left','front-right','rear-left','rear-right','front-center','lfe','side-left','side-right'][loop.index0 * 2]}},{{['front-left','front-right','rear-left','rear-right','front-center','lfe','side-left','side-right'][loop.index0 * 2 + 1]}}
{% if card == audio.cards[0] and output == audio.cards[0].outputs[0] %}
set-default-sink {{audio.cards[0].outputs[0]}}
{% endif %}
{% endif %}
{% if audio.backend == "pulse" %}
load-module module-remap-sink sink_name={{output}} sink_properties="device.description='{{output}}'" remix=no master={{card.name}} channels=2 {% if audio.sample_rate is defined %} rate={{ audio.sample_rate }} {% endif %} channel_map=front-left,front-right master_channel_map={{
['front-left','front-right','rear-left','rear-right','front-center','lfe','side-left','side-right'][loop.index0 * 2]}},{{['front-left','front-right','rear-left','rear-right','front-center','lfe','side-left','side-right'][loop.index0 * 2 + 1]}}
{% if card == audio.cards[0] and output == audio.cards[0].outputs[0] %}
set-default-sink {{audio.cards[0].outputs[0]}}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}

# create virtual sinks that direct to more than one actual sink
{% for output in audio.virtual_outputs %}
load-module module-combine-sink sink_name="{{ output.name }}" sink_properties="device.description='{{output.name}} ({{output.combining | join(" + ")}})'" slaves="{{ output.combining | join(",") }}" channels=2 {% if output.flags is defined %}{% for key, value in (output.flags).items() %}{{key}}={{value}}{% endfor %}{% endif %}

{% endfor %}

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect channels=2
.fail
.endif

### Automatically load driver modules for Bluetooth hardware
.ifexists module-bluetooth-policy.so
load-module module-bluetooth-policy
.endif

.ifexists module-bluetooth-discover.so
load-module module-bluetooth-discover
.endif

{% for c in audio.pulse_default_pa %}
{{ c.command }} {{ c.name }} {{ c.args }}
{% endfor %}

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle timeout=60

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
# load-module module-role-cork

### Block audio recording for snap confined packages unless they have
### the "pulseaudio" or "audio-record" interfaces plugged.
.ifexists module-snap-policy.so
load-module module-snap-policy
.endif

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply
